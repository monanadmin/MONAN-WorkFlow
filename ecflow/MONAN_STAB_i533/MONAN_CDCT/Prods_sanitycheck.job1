#!/bin/bash
set -e # stop the shell on first error
set -u # fail when using an undefined variable
set -x # echo script lines as they are executed
#set +o noclobber
 
 
# Defines the variables that are needed for any communication with ECF
export ECF_PORT=8146    # The server port number
export ECF_HOST=egeon-login1.cptec.inpe.br    # The host name where the server is running
export ECF_NAME=/MONAN_STAB_i533/MONAN_CDCT/Prods_sanitycheck    # The name of this current task
export ECF_PASS=2MO6VwrX    # A unique password
export ECF_TRYNO=1  # Current try number of the task
export ECF_RID=$$             # record the process id. Also used for zombie detection
export ECF_HOME=/mnt/beegfs/monan/i533-MONAN-Workflow/MONAN-WorkFlow/ecflow
 
# Define the path where to find ecflow_client
# make sure client and server use the *same* version.
# Important when there are multiple versions of ecFlow
#export PATH=/usr/local/apps/ecflow/5.8.4/bin:$PATH
 
# Tell ecFlow we have started
ecflow_client --init=$$
 
 
# Define a error handler
ERROR() {
   set +e                      # Clear -e flag, so we don't fail
   wait                        # wait for background process to stop
   ecflow_client --abort=trap  # Notify ecFlow that something went wrong, using 'trap' as the reason
   trap 0                      # Remove the trap
   exit 0                      # End the script
}
 
 
# Trap any calls to exit and errors caught by the -e flag
trap ERROR 0
 
 
# Trap any signal that may cause the script to fail
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 10 12 13 15



##########################################################################
#
#  Exports de datas/dirs importantes
#





echo ""
echo "===============  MY TASK STARTS HERE =================="
echo ""
      
#-----------------------------------------------------------------------------#
# !SCRIPT: run_poducts
#
# !DESCRIPTION:
#     Script to run the products of pos-processing of MONAN model .
#     
#-----------------------------------------------------------------------------#


# Standart directories variables:---------------------------------------
DIRHOMES=/mnt/beegfs/monan/i533-MONAN-Workflow/MONAN-WorkFlow/ecflow/MONAN_STAB_i533/MONAN_CDCT/MONAN-Products;  mkdir -p ${DIRHOMES}  
DIRHOMED=/mnt/beegfs/monan/i533-MONAN-Workflow/MONAN-WorkFlow/ecflow/MONAN_STAB_i533/MONAN_CDCT/MONAN-Products;  mkdir -p ${DIRHOMED}  
SCRIPTS=${DIRHOMES}/scripts;                                      mkdir -p ${SCRIPTS}
#DATAIN=${DIRHOMED}/datain;                                        #mkdir -p ${DATAIN}
#DATAOUT=${DIRHOMED}/dataout;                                      #mkdir -p ${DATAOUT}
#SOURCES=${DIRHOMES}/sources;                                      #mkdir -p ${SOURCES}
#EXECS=${DIRHOMED}/execs;                                          #mkdir -p ${EXECS}
#----------------------------------------------------------------------


# Input variables:--------------------------------------
EXP=GFS
RES=1024002
YYYYMMDDHHi=2024061700
FCST=240
#-------------------------------------------------------

ecflow_client --label=Info "Running  5.run_products.bash"
# Run the 5.run_products.bash script from MONAN-Products repo:----------
cd ${SCRIPTS}
echo "${SCRIPTS}/5.run_products.bash ${EXP} ${RES} ${YYYYMMDDHHi} ${FCST}"
sleep 5
#-------------------------------------------------------



# Veriffy all products generated
#prods_generated=("t2m")
#ipng=1
#while [ ${ipng} -le ${FCST} ]
#do
#   yyyymmddhhf=$(date -u +"%Y%m%d%H -d "${YYYYMMDDHHi} 00:00 ${ipng} hours")
#  for file in "${prods_generated[@]}_MONAN_DIAG_G_POS_${EXP}_${YYYYMMDDHHi}_${yyyymmddhhf}.00.00.x${RES}L55.png"
#  do
#      echo $i
#     if [ ! -s "${file}" ]
#     then
#        echo -e  "\n${RED}==>${NC} ***** ATTENTION *****\n"	  
#        echo -e  "${RED}==>${NC} [${0}] At least the file ${file} was not generated. \n"
#        exit -1
#     fi
#  done
#   ipng=$((ipng+1))
#done





echo ""
echo "----- FIM DA TASK ---"
echo ""
ecflow_client --label=Info "OK... 20240617  13:34"
wait                      # wait for background process to stop
ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0  


# file is served by ecflow-server