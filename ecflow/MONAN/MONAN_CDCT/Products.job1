#!/bin/bash
set -e # stop the shell on first error
set -u # fail when using an undefined variable
set -x # echo script lines as they are executed
#set +o noclobber
 
 
# Defines the variables that are needed for any communication with ECF
export ECF_PORT=5042    # The server port number
export ECF_HOST=egeon-login1.cptec.inpe.br    # The host name where the server is running
export ECF_NAME=/MONAN/MONAN_CDCT/Products    # The name of this current task
export ECF_PASS=jOLA7dBB    # A unique password
export ECF_TRYNO=1  # Current try number of the task
export ECF_RID=$$             # record the process id. Also used for zombie detection
export ECF_HOME=/mnt/beegfs/carlos.souza/repo_Monan/i522-MONAN-WorkFlow/MONAN-WorkFlow/ecflow
 
# Define the path where to find ecflow_client
# make sure client and server use the *same* version.
# Important when there are multiple versions of ecFlow
#export PATH=/usr/local/apps/ecflow/5.8.4/bin:$PATH
 
# Tell ecFlow we have started
ecflow_client --init=$$
 
 
# Define a error handler
ERROR() {
   set +e                      # Clear -e flag, so we don't fail
   wait                        # wait for background process to stop
   ecflow_client --abort=trap  # Notify ecFlow that something went wrong, using 'trap' as the reason
   trap 0                      # Remove the trap
   exit 0                      # End the script
}
 
 
# Trap any calls to exit and errors caught by the -e flag
trap ERROR 0
 
 
# Trap any signal that may cause the script to fail
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 10 12 13 15



##########################################################################
#
#  Exports de datas/dirs importantes
#





echo ""
echo "===============  MY TASK STARTS HERE =================="
echo ""
      
#-----------------------------------------------------------------------------#
# !SCRIPT: run_poducts
#
# !DESCRIPTION:
#     Script to run the products of pos-processing of MONAN model .
#     
#     Performs the following tasks:
# 
#        o Check all input files before (post-processed files)
#        o Creates the submition script
#        o Submit the products scripts
#        o Veriffy all products generated
#        
#
#-----------------------------------------------------------------------------#

ecflow_client --label=Info "instalando python, caso nao exista. "
module load python-3.9.15-gcc-9.4.0-f466wuv
python -m venv .venv 
source .venv/bin/activate
pip install -r /mnt/beegfs/carlos.souza/repo_Monan/i522-MONAN-WorkFlow/MONAN-WorkFlow/ecflow/MONAN/MONAN_CDCT/Products/scripts/requirements.txt 

# Set environment variables exports:
echo ""
echo -e "\033[1;32m==>\033[0m Moduling environment for MONAN Products...\n"
. /mnt/beegfs/carlos.souza/repo_Monan/i522-MONAN-WorkFlow/MONAN-WorkFlow/ecflow/MONAN/MONAN_CDCT/Products/scripts/setenv.bash


ecflow_client --label=Info "sentev executado. "

# Standart directories variables:---------------------------------------
DIRHOMES=${DIR_PRODUCTS}/ecflow/MONAN/MONAN_CDCT/Products;  mkdir -p ${DIRHOMES}  
DIRHOMED=${DIR_PRODUCTD}/ecflow/MONAN/MONAN_CDCT/Products;  mkdir -p ${DIRHOMED}  
SCRIPTS=${DIRHOMES}/scripts;                       mkdir -p ${SCRIPTS}
#DATAIN=${DIRHOMED}/datain;                        #mkdir -p ${DATAIN}
#contamonan: DATAOUT=/mnt/beegfs/monan/scripts_CD-CT/dataout   
DATAOUT=${DIRHOMED}/dataout   ; mkdir -p ${DATAOUT}
#SOURCES=${DIRHOMES}/sources;                      #mkdir -p ${SOURCES}
#EXECS=${DIRHOMED}/execs;                          #mkdir -p ${EXECS}
#----------------------------------------------------------------------


# Input variables:--------------------------------------
EXP=GFS
RES=1024002
YYYYMMDDHHi=2024052900
FCST=240
#-------------------------------------------------------


# Local variables:--------------------------------------
DIRFIGURES=/mnt/beegfs/monan/scripts_CD-CT/dataout/${YYYYMMDDHHi}/figures
DIRFTP=/pesq/share/monan/testes_continuos_CD-CT/html
#-------------------------------------------------------


ecflow_client --label=Info " Check all input files before"
# Check all input files before
files_needed=("/mnt/beegfs/monan/scripts_CD-CT/dataout/${YYYYMMDDHHi}/Post/MONAN_DIAG_G_POS_${EXP}_${YYYYMMDDHHi}.00.00.x${RES}L55.nc")
for file in "${files_needed[@]}"
do
  if [ ! -s "${file}" ]
  then
    echo -e  "\n${RED}==>${NC} ***** ATTENTION *****\n"	  
    echo -e  "${RED}==>${NC} [${0}] At least the file ${file} was not generated. \n"
    exit -1
  fi
done

ecflow_client --label=Info "Creates the submition script "
# Creates the submition script
rm -f ${SCRIPTS}/sub_py.bash
mkdir -p ${DATAOUT}/logs
cat << EOSH > ${SCRIPTS}/sub_py.bash
#!/bin/bash
#SBATCH --job-name=${PRODS_jobname}
#SBATCH --nodes=${PRODS_nnodes}
#SBATCH --partition=${PRODS_QUEUE}
#SBATCH --tasks-per-node=${PRODS_ncpn}
#SBATCH --ntasks=${PRODS_ncores}
#SBATCH --time=${PRODS_walltime}
#SBATCH --output=${DATAOUT}/logs/subpy.bash.o%j    # File name for standard output
#SBATCH --error=${DATAOUT}/logs/subpy.bash.e%j     # File name for standard error output
#SBATCH --exclusive


# Set environment variables exports:
echo ""
echo -e "\033[1;32m==>\033[0m Moduling environment for MONAN Products...\n"
. /mnt/beegfs/carlos.souza/repo_Monan/i522-MONAN-WorkFlow/MONAN-WorkFlow/ecflow/MONAN/MONAN_CDCT/Products/scripts/setenv.bash

cd \$SLURM_SUBMIT_DIR
echo \$SLURM_SUBMIT_DIR
echo "Lista de mÃ³dulos carregados: "
module list
echo "========"

ulimit -s unlimited
MPI_PARAMS="-iface ib0 -bind-to core -map-by core"
export OMP_NUM_THREADS=1
export MKL_NUM_THREADS=1
export I_MPI_DEBUG=5

# just for testing in my count on branch while desenv:
echo "python ${SCRIPTS}/gera_figs.py --datein ${YYYYMMDDHHi} --suffix .00.00.x${RES}L55 --prefix MONAN_DIAG_G_POS_${EXP}_  --mxhour ${FCST}"
sleep 5
EOSH

ecflow_client --label=Info "Submit the products script "
# Submit the products scripts
chmod a+x ${SCRIPTS}/sub_py.bash
sbatch --wait ${SCRIPTS}/sub_py.bash


ecflow_client --label=Info "Copying pngs to ftp area. "
echo "cp -f ${DIRFIGURES}/*png ${DIRFTP}/"
sleep 5

# Veriffy all products generated
#prods_generated=("")
#for file in "${prods_generated[@]}"
#do
#  if [ ! -s "${file}" ]
#  then
#    echo -e  "\n${RED}==>${NC} ***** ATTENTION *****\n"	  
#    echo -e  "${RED}==>${NC} [${0}] At least the file ${file} was not generated. \n"
#    exit -1
#  fi
#done





echo ""
echo "----- FIM DA TASK ---"
echo ""
ecflow_client --label=Info "OK... 20240529  18:43"
wait                      # wait for background process to stop
ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0  


# file is served by ecflow-server